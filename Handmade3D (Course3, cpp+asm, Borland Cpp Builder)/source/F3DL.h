/*******************************************************************
*                           Fast3DLibrary
*   Графическая библиотека для работы с 2D/3D графикой.
*   Не используются OpenGL, DirectX, Glide, SDL, ets.
*   Основана на Win32API. Для Borland C++ Builder 6.
*
*                              F3DL.*
*   Главный модуль библиотеки, содержит базовый набор констант,
*   типов и функций. Необходим для других модулей.
*******************************************************************/
#ifndef F3DL_H
#define F3DL_H

#include <windows.h>
#include <fastmath.h>
#include <values.h>

//#################################### Модификаторы кода ####################################################

    // думаю, и так понятно { сейчас не поддерживается, используется по-умолчанию }
//	#define DOUBLE_BUFFERED

	// при выводе линий используется алгоритм Брезенхейма, иначе алгоритм "J.Boyer & J.J.Bourdin" ( 8] ГЛЮЧИТ...)
	#define BREZENHEM_LINE

	// включены проверки диапазонов
	#define BOUNDS_AUTO_CHECK

    // проверка на возможность вызова более простой эквивалентной функции (e.g. линия из одного элемента - это точка)
	#define CALL_OPTIMIZE

	// сокращение проверок при рекурсивных и вложенных вызовах { сейчас не поддерживается }
//	#define NO_REC_BOUNDS_CHECK


//###########################################################################################################
//#################################### Возможные результаты #################################################

#define	F3D_NO_ERROR			 0	// нет ошибок
#define	F3D_DATA_ERROR			-1	// некорректные параметры
#define	F3D_CRAZY_CALL			-2	// вызвана недопустимая в данный момент функция (не ошибка, а напоминание)
#define	F3D_API_ERROR			-3	// ошибка при вызове API-функции (скорее всего вскоре выкину)
#define	F3D_MEMORY_ERROR		-4	// недостаточно памяти или системная ошибка при работе с памятью



//###########################################################################################################
//#################################### Константы ############################################################

	// значение максимального номера цвета
#define	F3D_MAX_COLOR			0xFFFFFF



//###########################################################################################################
//#################################### Вспомогательные макросы ##############################################

#define f3d_RGB(r,g,b) ((((r)<<8) | (g)) << 8) | (b)
#define f3d_min(a,b) ((a)<(b)) ? (a) : (b)
#define f3d_max(a,b) ((a)>(b)) ? (a) : (b)
#define f3d_abs(a) ((a)<0) ? -(a) : (a)

#define S32 signed long int
#define U32 unsigned long int
#define COLOR U32

struct POINT32
{
	S32 x, y;
};

struct TRIPLE
{
	double x, y, z;
};

//###########################################################################################################
//################################## Графическая подсистема ( 2D )###########################################

		// инициализация системы
	U32 f3d_Init(HDC _hDC, U32 _width, U32 _height);

		// освобождение ресурсов
	U32 f3d_Done();

		// переключение страниц
	U32 f3d_Flip();

		// очистка буфера цвета
	U32 f3d_Clear(COLOR color);

		// очистка буфера цвета. быстрее, чем f3d_Clear, но цвет задан БАЙТОМ (т.е. оттенки серого)
	U32 f3d_ClearByte(BYTE color);

		// вывод пикселя
	U32 f3d_SetPixel(U32 x, U32 y, U32 color);

    	// считывание пикселя (возвращает либо цвет, либо ошибку)
	U32 f3d_GetPixel(U32 x, U32 y);

    	// вывод линии в плоскости экрана
	U32 f3d_Line2D(U32 x1, U32 y1, U32 x2, U32 y2, COLOR color);

    	// вывод горизонтальной линии
	U32 f3d_HLine(S32 x1, S32 x2, S32 y, COLOR color);

		// вывод вертикальной линии
	U32 f3d_VLine(S32 x, S32 y1, S32 y2, COLOR color);

    	// вывод треугольника в плоскости
	U32 f3d_Triangle(POINT32 p1, POINT32 p2, POINT32 p3, COLOR color);

//###########################################################################################################
//################################## Графическая подсистема ( 3D )###########################################

		// инициализация буфера глубины
	U32 f3d_ZbufInit();

		// освобождение ресурсов под буфер глубины
	U32 f3d_ZbufDone();

		// очистка буфера глубины
	U32 f3d_ZbufClear();

		// формирование триплекса
	TRIPLE Triple(double x, double y, double z);

		// вывод ОДНОЙ ЕДИНСТВЕННОЙ точки с учетом буфера глубины
	U32 f3d_SetPixel3D(S32 x, S32 y, double z, COLOR color);

		// вывод горизонтальной (в проекции на экран) линии
	U32 f3d_HLine3D(S32 x1, S32 x2, double z1, double z2, S32 y, COLOR color);

		// вывод треугольника в пространстве (базовая процедура, буду отпимизировать до предела)
	U32 f3d_Triangle3D(TRIPLE &p1, TRIPLE &p2, TRIPLE &p3, COLOR color);

//###########################################################################################################
//#################################### Дополнительные функции ###############################################

		// Масштабирование окна под заданные размеры клиентской области. Можно еще и центровать на экране.
	void f3d_SetClientRect(HWND hWnd, U32 width, U32 height, bool centered);

		// Выравнивание значения на 4.
	U32 f3d_Align4(U32 val);

    	// Заливка dest длиной len 24-битных блоков 24-битным значением color
	void f3d_memset_24(U32 dest, U32 len, COLOR color);

		// вычисление знака для unsigned long int
	S32 f3d_sign(S32 a);

		// округление с отбрасыванием дробной части
	double f3d_ftrunc(double a);

    	// округление до целого, отбрасыванием дробной части 
	S32 f3d_fround(double a);

    	// одновременное получение синуса [s] и косинуса [c] угла [a], заданного в градусах
	void _sincos_(double a, double &s, double &c);

    	// вычисления арккосинуса a угла c
	void _arccos_(double *c, double *a);

    	// формирование структуры POINT32 по значениям координаты
	POINT32 Point32(S32 x, S32 y);

    	// обмен значений
	void swap(TRIPLE &v1, TRIPLE &v2);

//###########################################################################################################
//################################## Доступ ко внутренним полям #############################################

    	// получение размера области вывода
	void f3d_GetBuffDims(POINT32 *res);
	void f3d_GetBuffHalfDims(POINT32 *res);

#pragma warn -rvl // забивать на отсутствие возвращаемого значения

#endif // F3DL_H
